import math as m
import prettytable as pt
cyl = 170
clev = 64
thrd = 10
stk = 60
Aleng = cyl + clev + thrd + stk
Bleng = Aleng + stk
alpha = 4
theta = 7
Rleng = 52.99

A = [Aleng * m.sin(m.radians(alpha)), Aleng * m.cos(m.radians(alpha))]
B = [Bleng * m.sin(m.radians(alpha+theta)), Bleng * m.cos(m.radians(alpha+theta))]
pttbl = pt.PrettyTable()
pttbl.field_names = ['ALPHA', 'BETA', 'R_length (mm)', 'R_length (in)',\
                     'Rx_from_origin (mm)', 'Ry_from_origin (mm)',\
                     'Rx_from_origin (in)', 'Ry_from_origin (in)',\
                     'Angle_btwn_opne/close', 'Torque_Angle', 'R_ref. (mm)']

for Rleng in range(5080, 7621):
    Rleng = round((Rleng * 0.01), 3)
    print('ARM length = %smm (%sin)         ' %(Rleng, round((Rleng/25.4),3)), end='\r')
    for beta_mag in range(0, 3600):
        beta = beta_mag * 0.1
        R = [abs(Rleng * m.sin(m.radians(beta))), abs(Rleng * m.cos(m.radians(beta)))]
        Rabs = []
        Rabs.append(A[0] + R[0]) if beta_mag in range(0, 1801) else Rabs.append(A[0] - R[0])
        Rabs.append(A[1] - R[1]) if beta_mag in range(900, 2701) else Rabs.append(A[1] + R[1])
        RtoA = m.sqrt(pow(abs(A[0]-Rabs[0]), 2) + pow(abs(A[1]-Rabs[1]), 2)) #for reference
        RtoB = m.sqrt(pow(abs(B[0]-Rabs[0]), 2) + pow(abs(B[1]-Rabs[1]), 2))
        angleAB = 2 * m.degrees(m.asin((0.5 * (m.sqrt(pow(abs(A[0]-B[0]), 2) \
                                                      + pow(abs(A[1]-B[1]), 2))) / Rleng)))
        if (Rleng >= round(RtoB, 1)-0.05 and Rleng <= round(RtoB, 1)+0.05) \
        and (beta >= 270 and beta < 359):
            torqueangle = (90-alpha-theta) - m.degrees(m.asin((B[1]-Rabs[1])/Rleng))
            pttbl.add_row([alpha, round(360-beta, 1), round(Rleng, 3),
                            round(Rleng/25.4, 5), round(Rabs[0], 3),
                            round(Rabs[1], 3), round(Rabs[0]/25.4, 5),
                            round(Rabs[1]/25.4, 5), round(angleAB, 3),
                            round(torqueangle, 3), round(RtoB, 3)])
#             goal.append([alpha, round(360-beta, 1), round(Rleng, 3), round(Rleng/25.4, 5), \
#                          round(Rabs[0], 3), round(Rabs[1], 3), \
#                          round(Rabs[0]/25.4, 5), round(Rabs[1]/25.4, 5),
#                          round(angleAB, 3), round(torqueangle, 3), round(RtoB, 3)])
#             print(round(beta, 1), Rleng/25.4, Rabs, RtoB, angleAB, torqueangle)
