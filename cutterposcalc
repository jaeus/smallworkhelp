import pandas as pds
import matplotlib.pyplot as mpl
mpl.rcParams['figure.figsize'] = [25, 25]
mpl.rcParams.update({'font.size': 20})
import math as m

def lengfromcoord(func_list1, func_list2):
    return(round(m.sqrt(pow((func_list2[0] - func_list1[0]), 2) + pow((func_list2[1] - func_list1[1]), 2)), 5))

# NO CHANGE VALUES UNLESS MODIFY THE CYLINDER & STROKE
origin = [0, 0] # pivot hole = origin
stroke = 6.289 - 1
pistonposition = [[0, -9.387]]
pistonposition.append([0, round(pistonposition[0][1] + stroke, 3)])
pressure = 2000
dia_cyl = 2



# CHANGE IF NECESSARY
dplink = 5.31 # length of piston link
dblinkdim = [-2.113, -4.531] # dimensions between blade hinge hole and pivot hole, on the blade (blade link)
dblink = lengfromcoord(dblinkdim, origin) # length of blade link
colname = ['PISTON_POS', 'DIST_HINGEtoLH', 'DEG_ALPHA', 'DIST_PISTONtoLH', 'DEG_BETA', 'X_LH', 'Y_LH', 'RAD_BLADE',
           'X_BLADE', 'Y_BLADE', 'DEG_ZETA', 'DEG_THETA', 'X_CONT', 'Y_CONT', 'DEG_DELTA', 'DEG_GAMMA', 'FORCE_CUTTING']
# dist_pivot to lh: distance between pivot (origin) to link hinge point
# deg_alpha: the angle generated by blade link and vertical line
# dist_pistonend to lh: distance between piston end to link hinge point
# deg_beta: the angle created by piston link and vertical line
# coord_lh (x, y): link hinge point's coordinate based on the origin (pivot)
# rad_blade: blade radius
# coord_blade (x, y): center of blade radius based on the origin (pivot)
# deg_zeta: the angle generated by the line from blade center to the origin and vertical line
# deg_theta: the angle between blade contact point and vertical line (0 to 119)
# coord_contact (x, y): blade contact point made by theta
# deg_delta: the angle created by the line from hinge point to contact point and vertical line
# deg_gamma: the angle generated by the line from hinge point to contact point and contact point to center of blade radius


# PARAMETERS
pistterm = 100
pistres = 1000
pistonrange = [int(pistonposition[0][1] * pistres), int(pistonposition[1][1] * pistres)]
degrez = 100 #angle resolution, for loop doesn't take decimal as step
deglimit = [20 * degrez, 80 * degrez] # no need to search the value in full 90 degree
dcml = 3 # round digits unless specified

# bladerad = 3.5
# bladerad_coord = [0.609, 4.616]
bladerad = 4.5
bladerad_coord = [1.4, 5.375]

bladerad_leng = lengfromcoord(bladerad_coord, origin)
thetalimit = 120
deg_zeta = m.degrees(m.atan(bladerad_coord[0] / bladerad_coord[1]))



dataset = pds.DataFrame(columns = colname)
for pistonmove in range(pistonrange[0], pistonrange[1], pistterm):
    pistpos = pistonmove / 1000
    stoptrigger = len(dataset)
    for deg_beta in range(deglimit[0], deglimit[1]):
        print('searching... (beta: %s at piston position %s")               ' \
              %(round(deg_beta / degrez, dcml), pistpos), end ='\r') # progress check
        for deg_alpha in range(deglimit[0], deglimit[1]):
            dplinkcoord = [dplink * m.sin(m.radians(deg_beta / degrez)), dplink * m.cos(m.radians(deg_beta / degrez))]
            dblinkcoord = [dblink * m.sin(m.radians(deg_alpha / degrez)), dblink * m.cos(m.radians(deg_alpha / degrez))]
            if (round(dplinkcoord[0], dcml) == round(dblinkcoord[0], dcml)) and \
            (round(abs(dplinkcoord[1]) + abs(dblinkcoord[1]), dcml) == abs(pistpos)):
                link_coord = [-round(dplink * m.sin(m.radians(round(deg_beta / degrez, 2))), dcml),
                              -round(dblink * m.cos(m.radians(round(deg_alpha / degrez, 2))), dcml)]
                # defining blade parameters - whether it's initial or not
                if stoptrigger > 0:
                    deg_zeta += round(deg_alpha / degrez, 2) - dataset['DEG_ALPHA'][len(dataset) - 1]
                    bladerad_coord = [round(bladerad_leng * m.sin(m.radians(deg_zeta)), dcml),
                                      round(bladerad_leng * m.cos(m.radians(deg_zeta)), dcml)]
                for deg_theta in range(thetalimit):
                    contact_coord = [bladerad_coord[0] - round(bladerad * m.sin(m.radians(deg_theta)), dcml),
                                     bladerad_coord[1] - round(bladerad * m.cos(m.radians(deg_theta)), dcml)]
                    dist_linkcontact = lengfromcoord(contact_coord, link_coord)
                    dist_linkblade = lengfromcoord(bladerad_coord, link_coord)
                    deg_delta = round(m.degrees(m.acos(abs(contact_coord[0] - link_coord[0]) / dist_linkcontact)), 2)
                    deg_gamma_process = (pow(dist_linkcontact, 2) + pow(bladerad, 2) - pow(dist_linkblade, 2)) / \
                                               (2 * dist_linkcontact * bladerad)
                    if deg_gamma_process > 1:
                        deg_gamma = round(m.degrees(m.acos(1 - deg_gamma_process % 1)), 2)
                    elif deg_gamma_process < -1:
                        deg_gamma = round(m.degrees(m.acos(-2 - deg_gamma_process)), 2)
                    else:
                        deg_gamma = round(m.degrees(m.acos(deg_gamma_process)), 2)
                    cutting_force = round(pressure * (pow(dia_cyl, 2) * m.pi) / 4 / 2 * m.cos(m.radians(deg_beta)) * \
                                          m.cos(m.radians(180 - deg_delta - (90 - deg_beta))) * m.cos(m.radians(180 - deg_gamma)), dcml)
                    dataset.loc[len(dataset)] = [pistpos, dblink, round(deg_alpha / degrez, 2), dplink,
                                                 round(deg_beta / degrez, 2), link_coord[0], link_coord[1], bladerad,
                                                 bladerad_coord[0], bladerad_coord[1], round(deg_zeta, dcml), deg_theta,
                                                 contact_coord[0], contact_coord[1], deg_delta, deg_gamma, cutting_force]
                break
            elif len(dataset) > 0 and round(deg_beta / degrez, dcml) >= (dataset['DEG_BETA'][len(dataset) - 1] + 0.1):
                if round(abs(dplinkcoord[1]) + abs(dblinkcoord[1]), dcml) == abs(pistpos):
                    link_coord = [-round(dplink * m.sin(m.radians(round(deg_beta / degrez, 2))), dcml),
                                  -round(dblink * m.cos(m.radians(round(deg_alpha / degrez, 2))), dcml)]
                    # defining blade parameters - whether it's initial or not
                    if stoptrigger > 0:
                        deg_zeta += round(deg_alpha / degrez, 2) - dataset['DEG_ALPHA'][len(dataset) - 1]
                        bladerad_coord = [round(bladerad_leng * m.sin(m.radians(deg_zeta)), dcml),
                                          round(bladerad_leng * m.cos(m.radians(deg_zeta)), dcml)]
                    for deg_theta in range(thetalimit):
                        contact_coord = [bladerad_coord[0] - round(bladerad * m.sin(m.radians(deg_theta)), dcml),
                                         bladerad_coord[1] - round(bladerad * m.cos(m.radians(deg_theta)), dcml)]
                        dist_linkcontact = lengfromcoord(contact_coord, link_coord)
                        dist_linkblade = lengfromcoord(bladerad_coord, link_coord)
                        deg_delta = round(m.degrees(m.acos(abs(contact_coord[0] - link_coord[0]) / dist_linkcontact)), 2)
                        deg_gamma_process = (pow(dist_linkcontact, 2) + pow(bladerad, 2) - pow(dist_linkblade, 2)) / \
                                                   (2 * dist_linkcontact * bladerad)
                        if deg_gamma_process > 1:
                            deg_gamma = round(m.degrees(m.acos(1 - deg_gamma_process % 1)), 2)
                        elif deg_gamma_process < -1:
                            deg_gamma = round(m.degrees(m.acos(-2 - deg_gamma_process)), 2)
                        else:
                            deg_gamma = round(m.degrees(m.acos(deg_gamma_process)), 2)
                        cutting_force = round(pressure * (pow(dia_cyl, 2) * m.pi) / 4 / 2 * m.cos(m.radians(deg_beta)) * \
                                              m.cos(m.radians(180 - deg_delta - (90 - deg_beta))) * m.cos(m.radians(180 - deg_gamma)), dcml)
                        dataset.loc[len(dataset)] = [pistpos, dblink, round(deg_alpha / degrez, 2), dplink,
                                                     round(deg_beta / degrez, 2), link_coord[0], link_coord[1], bladerad,
                                                     bladerad_coord[0], bladerad_coord[1], round(deg_zeta, dcml), deg_theta,
                                                     contact_coord[0], contact_coord[1], deg_delta, deg_gamma, cutting_force]
            if len(dataset) > 0 and round(deg_beta / degrez, dcml) >= dataset['DEG_BETA'][len(dataset) - 1] + 3:
                break
        if len(dataset) != stoptrigger:
            deglimit[0] = int((dataset['DEG_ALPHA'][len(dataset) - 1] - 1) * degrez)
            break
dataset.to_excel('hock_cutter_R' + str(bladerad) + '.xlsx', index=False)
print('%s POSITIONS CALCULATED                                     ' %(len(dataset['PISTON_POS'].value_counts())))
