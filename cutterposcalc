import math as m

def lengfromcoord(func_list1, func_list2):
    return(round(m.sqrt(pow((func_list2[0] - func_list1[0]), 2) + pow((func_list2[1] - func_list1[1]), 2)), 5))

# NO CHANGE VALUES UNLESS MODIFY THE CYLINDER & STROKE
    # hinge hole on the blade is the origin
origin = [0, 0]
stroke = 6.289 - 1
pistpos = [[0, -9.387]]
pistpos.append([0, round(pistpos[0][1] + stroke, 3)])

# CHANGE IF NECESSARY
dplink = 5.31 # length of piston link
dblinkdim = [-2.113, -4.531] # dimensions between link hole and hinge hole, on the blade (blade link)
dblink = lengfromcoord(dblinkdim, origin) # length of blade link


# PARAMETERS
degrez = 100 #angle resolution, for loop cannot take decimal as step
deglimit = [15 * degrez, 80 * degrez] # no need to search the value in full 90 degree
dcml = 3 # unless specified

bladerad = 3.5
bladerad_coord = [[0.609, 4.616]]
bladerad_leng = lengfromcoord(bladerad_coord[0], origin)



# DEGREE OF EACH LINK WHEN HOCK CUTTER OPENS
    # alpha: the angle generated by blade link and vertical line
    # beta: the angle generated by piston link and vertical line
linkangles = [] # two sets of alpha & beta (piston position at hock cutter open and cut)
for pistonpos in pistpos:
    for degbeta in range(deglimit[0], deglimit[1]):
        print('searching... (beta: %s)          ' %(round(degbeta / degrez, dcml)), end ='\r') # progress check
        for degalpha in range(deglimit[0], deglimit[1]):
            dplinkcoord = [dplink * m.sin(m.radians(degbeta / degrez)), dplink * m.cos(m.radians(degbeta / degrez))]
            dblinkcoord = [dblink * m.sin(m.radians(degalpha / degrez)), dblink * m.cos(m.radians(degalpha / degrez))]
            if (round(dplinkcoord[0], dcml) == round(dblinkcoord[0], dcml)) and \
            (round(abs(dplinkcoord[1]) + abs(dblinkcoord[1]), dcml) == abs(pistonpos[1])):
                print('a: %s _ b: %s /// sin(a): %s" _ sin(b): %s" /// cos(a) + cos(b): %s" (%s" from drawing)' \
                      %(round(degalpha / degrez, 2), round(degbeta / degrez, 2),
                        round(dblinkcoord[0], dcml), round(dplinkcoord[0], dcml),
                        round(abs(dplinkcoord[1]) + abs(dblinkcoord[1]), dcml), abs(pistonpos[1])))
                linkangles.append([round(degalpha / degrez, 2), round(degbeta / degrez, 2)])
                break
    print('ALL SEARCHED AT PISTON POS. = %s (angle range between %s to %s)\n' \
          %(pistonpos, deglimit[0] / degrez, deglimit[1] / degrez))
    
link_coord = []
for degset in linkangles:
    link_coord.append([-round(dplink * m.sin(m.radians(degset[1])), dcml),
                       -round(dblink * m.cos(m.radians(degset[0])), dcml)])
bladerad_cutangle = m.degrees(m.atan(bladerad_coord[0][0] / bladerad_coord[0][1])) + linkangles[1][0] - linkangles[0][0]
bladerad_coord.append([round(bladerad_leng * m.sin(m.radians(bladerad_cutangle)), dcml),
                       round(bladerad_leng * m.cos(m.radians(bladerad_cutangle)), dcml)])
