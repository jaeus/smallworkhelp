import pandas as pds
import numpy as npy
import matplotlib.pyplot as mpl
mpl.rcParams['figure.figsize'] = [25, 25]
mpl.rcParams.update({'font.size': 20})
import math as m
import datetime as dt
import os

def lengthbycoord(func_list1, func_list2):
    return(round(m.sqrt(pow((func_list2[0] - func_list1[0]), 2) + pow((func_list2[1] - func_list1[1]), 2)), 5))

def anglecalculator(func_lengA, func_lengB, func_lengC):
    func_result = (pow(func_lengB, 2) + pow(func_lengC, 2) - pow(func_lengA, 2)) / (2 * func_lengB * func_lengC)
    if func_result <= 1 and func_result >= -1:
        return(round(m.degrees(m.acos(func_result)), 3))
    else:
        if func_result < -1:
            return(round(m.degrees(m.acos(-(func_result + 2))), 3))
        else:
            return(round(m.degrees(m.acos(-(func_result - 2))), 3))
    
    # old
#     return(round(m.degrees(m.acos((pow(func_lengB, 2) + pow(func_lengC, 2) - pow(func_lengA, 2)) /\
#                                   (2 * func_lengB * func_lengC))), 3))

def initialdegree(func_x, func_length):
    return(m.degrees(m.acos(func_x / func_length)))

def ru(func_value):
    return(round(func_value, 3))

################################################################################################################
# origin: pivot point, coordinate
# coord_piston: position coordinate of piston, retract to extend
# dist_pistontolh: length of piston link
# dia_cyl: cylinder inner diameter
# coord_linkhole: linkhole coordinate
# dist_origintolh: distance between the linkhole to origin
# radi_blade: blade inner radius
# coord_bladectr: center coordinate of blade inner radius
# deg_bladerange: degree range for searching proper points to meet the minimum opening distance
# crossoveramnt: required cross-over distance when the blades are fully closed, unit is mm
# dist_bladectr = distnace between the blade radius center to origin
# coord_bladeend_init: coordinate of the endpoint of blade to track the opening distance
# crossover_check: to check if crossover distance meets the minimum requirement

# NO CHANGE VALUES UNLESS MODIFY THE CYLINDER & STROKE
origin = [0, 0]
stroke = 6.289 - 1
coord_piston = [[0, -9.387]]
coord_piston.append([0, round(coord_piston[0][1] + stroke, 3)])

dia_cyl = 2


# CHANGE IF NECESSARY (UPPER MANAGEMENT PERMISSION NEEDED)
dist_pistontolh = 5.31 # length of piston link
coord_linkhole = [-2.113, -4.531] # coordinate from origin to linkhole, values from the drawing
dist_origintolh = lengthbycoord(coord_linkhole, origin) # length of blade link


# PARAMETERS
pistonmoveterm = 100 # divided by 1000, smaller number gets precised result, takes more time
coord_piston[1][1] += pistonmoveterm / 1000 # compensation for the loss of distance when extending
pistres = 1000 # resolution for for loop
pistonmoverange = [int(coord_piston[0][1] * pistres), int(coord_piston[1][1] * pistres)]
pressure = 2000
dcml = 3 # round digits unless specified

bladerad = 3.5
coord_bladectr = [0.609, 4.616]

deg_bladerange = [105, 131]
crossoveramnt = 6

forcerange = [10, 5]


colname = ['PISTON_POS', 'DIST_LINK', 'X_LINK_ORG', 'Y_LINK_ORG', 'BLADE_RADIUS', 'X_BLADE_CTR_ORG', 'Y_BLADE_CTR_ORG', 'X_BLADE_CTR', 'Y_BLADE_CTR',
           'ANG_BLADE_ENDPOINT', 'DIST_CROSSOVER', 'DEG_ALPHA', 'DEG_BETA', 'DEG_GAMMA', 'DEG_DELTA', 'DEG_THETA',
           'DIST_INSIDE', 'TORQUE', 'FORCE_CUTTING']
foldername = 'FINAL'
os.makedirs(foldername) if not os.path.exists(foldername) else ''

# current blade's cutting force
   
    
# additional parameters for linkage change
x_linklimit = [1.4, 1.9]
# dist_pistontolh_init = 2.35
y_linklimit = 8.5

dataset = []
for dist_pistontolh in list(npy.arange(4.1, 6.1, 0.1)):
    for deg_beta_init in range(10, 36, 1):
        if dist_pistontolh * m.sin(m.radians(deg_beta_init)) < x_linklimit[0]:
            continue
        if dist_pistontolh * m.cos(m.radians(deg_beta_init)) > y_linklimit:
            if dist_pistontolh * m.sin(m.radians(deg_beta_init)) < x_linklimit[1]:
                continue
        coord_linkhole = [-dist_pistontolh * m.sin(m.radians(deg_beta_init)),
                          coord_piston[0][1] + dist_pistontolh * m.cos(m.radians(deg_beta_init))] # coordinate from origin to linkhole, values from the drawing
        dist_origintolh = lengthbycoord(coord_linkhole, origin)

        
        radi_blade = [3.5, 6.6]
        for bladerad in list(npy.arange(radi_blade[0], radi_blade[1], 0.1)):
            range_bladectr = [[-1, 2], [0.75 + bladerad, 2 + bladerad]]
            for coord_bladectr[0] in list(npy.arange(range_bladectr[0][0], range_bladectr[0][1], 0.1)):
                for coord_bladectr[1] in list(npy.arange(range_bladectr[1][0], range_bladectr[1][1], 0.1)):
                    for deg_bladeend in range(deg_bladerange[0], deg_bladerange[1]):
                        print('SEARCHING.. (Link: %s, Beta Init.: %s, Blade Rad: %s, Blade CTR: %s/%s, Blade-end Angle: %s, MAX_FORCE: %s)             ' \
                              %(ru(dist_pistontolh), ru(deg_beta_init), ru(bladerad), ru(coord_bladectr[0]),
                                ru(coord_bladectr[1]), ru(deg_bladeend), 0), end = '\r', flush = True)
                        deg_alpharange = [anglecalculator(dist_pistontolh, dist_origintolh, abs(coord_piston[0][1])),
                                          anglecalculator(dist_pistontolh, dist_origintolh, abs(coord_piston[1][1]))]
                        
                        # check if cross-over at fully extend position is 6mm at least
                        dist_bladectr = lengthbycoord(coord_bladectr, origin)
                        deg_zeta_init = initialdegree(coord_bladectr[0], dist_bladectr)
                        crossover_check = (dist_bladectr * \
                                           m.cos(m.radians(deg_zeta_init - (deg_alpharange[1] - deg_alpharange[0])))) - bladerad
                        if crossover_check < (crossoveramnt / 25.4):
                            continue

                        # check if the opening distance reaches 6" (3" half) at least
                        coord_bladeend_init = [coord_bladectr[0] - (bladerad * m.sin(m.radians(deg_bladeend))),
                                               coord_bladectr[1] - (bladerad * m.cos(m.radians(deg_bladeend)))]
                        if abs(coord_bladeend_init[0]) < 3.5:
                            continue

                        # check if cutting force is similar (+forcerange[0]%, -forcerange[1]%) to the current design
                        for pistonposition in range(pistonmoverange[0], pistonmoverange[1], pistonmoveterm):
                            deg_alpha = anglecalculator(dist_pistontolh, dist_origintolh, abs(pistonposition/1000))
                            deg_beta = anglecalculator(dist_origintolh, dist_pistontolh, abs(pistonposition/1000))
                            deg_gamma = anglecalculator(abs(pistonposition/1000), dist_origintolh, dist_pistontolh)

                            torque = round((pressure * (pow(dia_cyl, 2) * m.pi) / 4 / 2)\
                            * m.cos(m.radians(deg_beta)) * m.cos(m.radians(deg_gamma - 90)) * dist_origintolh, dcml)
                            deg_zeta = deg_zeta_init - (deg_alpha - deg_alpharange[0])
                            coord_bladectr_bystroke = [dist_bladectr * m.cos(m.radians(deg_zeta)),
                                                       dist_bladectr * m.sin(m.radians(deg_zeta))]
                            coord_bladecontact = [coord_bladectr_bystroke[0] - bladerad * m.sin(m.radians(90)),
                                                  coord_bladectr_bystroke[1] - bladerad * m.cos(m.radians(90))]
                            dist_bladecontact = lengthbycoord(coord_bladecontact, origin)
                            deg_theta = anglecalculator(dist_bladectr, bladerad, dist_bladecontact)
                            force_cutting = m.cos(m.radians(90 - deg_theta)) * torque / dist_bladecontact
                            if coord_bladecontact[0] >= -1.75 and coord_bladecontact[0] <= -1.25:
                                if force_cutting > 2400:
                                    dataset.append([ru(force_cutting), ru(coord_bladecontact[0]), ru(dist_pistontolh), coord_linkhole,
                                                    ru(bladerad), coord_bladectr, ru(deg_bladeend)])
                                    print(dataset[len(dataset) - 1], '\n')
                                    break
#                         print('SEARCHING.. (Link: %s, Beta Init.: %s, Blade Rad: %s, Blade CTR: %s/%s, Blade-end Angle: %s, MAX_FORCE: %s)             ' \
#                               %(ru(dist_pistontolh), ru(deg_beta_init), ru(bladerad), ru(coord_bladectr[0]),
#                                 ru(coord_bladectr[1]), ru(deg_bladeend), ru(force_cutting)), end = '\r', flush = True)
print('ALL PARAMETER COMPLETE                                                                                                                     ')
